name: Deploy to AWS
on:
  push:
    branches:
      - aws-release
    tags-ignore:
      - "*beta"

jobs:
  tag:
    name: New Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Extract Plugin Version from `unusedcss.php`
        id: version
        run: |
          VERSION=$(grep -m 1 "Version:" unusedcss.php | awk '{print $2}')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract Data from `readme.txt`
        id: readme
        run: |
          # Extract metadata from readme.txt using grep and sed
          TESTED_UPTO=$(grep "Tested up to:" readme.txt | sed 's/Tested up to: *//')
          REQUIRES_PHP=$(grep "Requires PHP:" readme.txt | sed 's/Requires PHP: *//')
          STABLE_TAG=$(grep "Stable tag:" readme.txt | sed 's/Stable tag: *//')
          REQUIRES_AT_LEAST=$(grep "Requires at least:" readme.txt | sed 's/Requires at least: *//')
          
          # Extract description section
          DESCRIPTION=$(sed -n '/== Description ==/,/==/{/== Description ==/d;/==/q;p}' readme.txt)
          
          # Extract changelog section
          CHANGELOG=$(sed -n '/== Changelog ==/,/==/{/== Changelog ==/d;/==/q;p}' readme.txt)
          
          if [ -z "$CHANGELOG" ]; then
            echo "Warning: No changelog found"
            CHANGELOG="<h4>Version ${{ env.VERSION }}</h4><ul><li>Release</li></ul>"
          fi

          # Store extracted values in environment variables
          echo "DESCRIPTION<<EOF" >> $GITHUB_ENV
          echo "$DESCRIPTION" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "TESTED_UPTO=$TESTED_UPTO" >> $GITHUB_ENV
          echo "REQUIRES_PHP=$REQUIRES_PHP" >> $GITHUB_ENV
          echo "STABLE_TAG=$STABLE_TAG" >> $GITHUB_ENV
          echo "REQUIRES_AT_LEAST=$REQUIRES_AT_LEAST" >> $GITHUB_ENV
          echo "HOMEPAGE=https://rapidload.io" >> $GITHUB_ENV

          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Zip Plugin Files
        run: |
          PLUGIN_NAME="unusedcss"
          # Create zip directly without wrapping folder
          zip -r "${PLUGIN_NAME}.zip" . -x ".git/*" ".github/*" "*.zip"
          # Remove everything except the zip
          find . -mindepth 1 -maxdepth 1 ! -name "${PLUGIN_NAME}.zip" -exec rm -rf {} +

      - name: List Files
        run: |
          pwd
          ls -la

      - name: Delete existing files from S3 version folder
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Delete existing files from S3 version folder
        run: aws s3 rm s3://${{ secrets.AWS_BUCKET_NAME }}/download/${{ env.VERSION }} --recursive

      - name: Delete existing files from S3 latest folder
        run: aws s3 rm s3://${{ secrets.AWS_BUCKET_NAME }}/latest --recursive

      - name: Upload Plugin ZIP to S3 version folder
        run: aws s3 cp unusedcss.zip s3://${{ secrets.AWS_BUCKET_NAME }}/download/${{ env.VERSION }}/unusedcss.zip --acl public-read

      - name: Upload Plugin ZIP to S3 latest folder
        run: aws s3 cp unusedcss.zip s3://${{ secrets.AWS_BUCKET_NAME }}/latest/unusedcss.zip --acl public-read

      - name: Generate Update JSON
        run: |
          mkdir -p plugin-update-check
          cat <<EOF > plugin-update-check/update.json
          {
            "version": "${{ env.VERSION }}",
            "download_url": "https://plugin.rapidload.ai/download/${{ env.VERSION }}/unusedcss.zip",
            "requires": "5.0",
            "tested": "${{ env.TESTED_UPTO }}",
            "requires_php": "${{ env.REQUIRES_PHP }}",
            "slug": "unusedcss",
            "name": "RapidLoad AI - Optimize Web Vitals Automatically",
            "author": "RapidLoad",
            "author_homepage": "https://rapidload.ai",
            "homepage": "${{ env.HOMEPAGE }}",
            "license": "GPLv3",
            "license_uri": "https://www.gnu.org/licenses/gpl-3.0.html",
            "last_updated": "$(date +'%Y-%m-%d')",
            "sections": {
              
            }
          }
          EOF

      - name: Delete existing Update JSON from S3
        run: aws s3 rm s3://${{ secrets.AWS_BUCKET_NAME }}/download/update.json

      - name: Upload Update JSON to S3
        run: aws s3 cp plugin-update-check/update.json s3://${{ secrets.AWS_BUCKET_NAME }}/download/update.json --acl public-read
